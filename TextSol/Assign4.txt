33.	Write a program to demonstrate functionalities of this keyword in java. 
>   import java.util.Scanner;
class Employee{
    private int empId;
    private String empName;
    void set(int empId, String empName){
        this.empId = empId;
        this.empName = empName;
    }
    void show(){
        System.out.println(empId+" "+empName);
    }
}

class thiss{
    public static void main(String args[]){
        Employee e = new Employee();
        e.set(1000,"Deepika Dabi");
        e.show();
    }

}

----------------------------------------------------------------

34.	Create a class Circle that has two data members, one to store the radius and another to store area and three methods first init() method to input radius from user, second calculateArea() method to calculate area of circle and third display() method to display values of radius and area. Create class CircleDemo ( main class) that creates the Circle object and calls init(), calculateArea() and display() methods.
> import java.util.Scanner;
class Circle{
    private int radius;
    private double area;
    void init(){
        System.out.println("Enter Radius : ");
        Scanner sc = new Scanner(System.in);
        radius = sc.nextInt();
    }
    void area(){
       area = (double)(3.14*radius*radius);
    }
    void show(){
        System.out.println(area);
    }
}

public class CircleDemo {
    public static void main(String args[])
    {
    Circle c = new Circle();
    c.init();
    c.area();
    c.show();
    
}
}

--------------------------------------------------------

35.	Create a class MathOperation that has four static methods. add() method that takes two integer numbers as parameter and returns the sum of the numbers. subtract() method that takes two integer numbers as parameter and returns the difference of the numbers. multiply() method that takes two integer numbers as parameter and returns the product. power() method that takes two integer numbers as parameter and returns the power of first number to second number. Create another class Demo (main class) that takes the two numbers from the user and calls all four methods of MathOperation class by providing entered numbers and prints the return values of every method.
>   import java.util.Scanner;
import java.lang.Math;

class MathOpe{
    private int sum;
    private int sub;
    private int mul;
    private double pow;
    void sum(int a, int b){
        sum = a+b;
    }
    void sub(int a, int b){
        sub = a-b;
    }
    void mul(int a, int b){
        mul = a*b;
    }
    void pow(int a, int b){
        pow = Math.pow(a, b);
    }
    void show(){
        System.out.println(sum+"   "+sub+"   "+mul+"   "+pow);
    }
}

public class MathOp {
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        System.out.println("Entet two numbers : ");
        int a = sc.nextInt();
        int b = sc.nextInt();
        MathOpe m = new MathOpe();
        m.sum(a, b);
        m.sub(a, b);
        m.mul(a, b);
        m.pow(a, b);
        m.show();
    }
}
---------------------------------------------------------------------------------------------------------------------------

36.	Create a class MathOperation containing overloaded methods ‘multiply’ to calculate multiplication of following arguments. 
    a.	 two integers 
    b.	 three floats 
    c.	 all elements of array 
    d.	one double and one integer 
>   //Create a class MathOperation containing overloaded methods ‘multiply’ to calculate multiplication of following arguments. 
//    a.	 two integers 
//    b.	 three floats 
//    c.	 all elements of array 
//    d.	one double and one integer 

class MathOperation{
    private double ans1;

    void mul(int a, int b){
        ans1 = (a*b);
    }

    void mul(int a, Float b){
        ans1 = (a*b);
    }
    void mul(float a, float b, float c){
        ans1 = a*b*c;
    }
    void mul(double a, int b){
        ans1 = a*b;
    }
    void show(){
        System.out.println(ans1);
    }

}
public class MulOverload {
    public static void main(String args[]){
        MathOperation m = new MathOperation();
        m.mul(2,4);     //int,int
        m.show();
        m.mul(2, 3,4);   //int, int, int
        m.show();
        m.mul(2, 2.4f);      //int, double
        m.show();
        m.mul(2.4,5);       //double, int
        m.show();
    }
}
------------------------------------------------------------------------------------------------------------
37.	Create a class Person with properties (name and age) with following features. 
    a.	Default age of person should be 18.
    b.	A person object can be initialized with name and age.
    c.	Method to display name and age of person
Create another class PersonDemo ( main class ) that demonstrates the functionalities of Person class by creating Person object and calling methods.

>   
import java.util.Scanner;

class PersonDemo{
    private String name;
    private int age;

    PersonDemo(int age, String name){
        this.name = name;
        this.age = age;
    }
    void display(){
        System.out.println(name+"  "+age);
    }
}
public class Person {
    public static void main(String args[]){
        java.util.Scanner sc = new Scanner(System.in);
        System.out.println("Enter Name : ");
        String name = sc.next();
        PersonDemo p = new PersonDemo(18, name);
        p.display();

    }
}

-----------------------------------------------------------------------------------------------------------



38.	Create a class Employee with three data members (empNo, salary and totalSalary) and following features.
    a.	Only parameterized constructor. [Do not overload the constructor]
    b.	totalSalary always represents salary total of all the employees created.
    c.	empNo should be auto incremented.
    d.	display total employees and totalSalary using a method.
Create another class EmployeeDemo (main class) that creates some Employee objects and calls Employee method to display no. of employees and total of their salaries.

>   import java.util.Scanner;
class Employee{
    private int empNo;
    private float salary;
    private String empName;
    static float totalSalary =0;

    Employee(int empNo, String empName, float salary){
        this.empNo = empNo;
        this.salary = salary;
        this.empName = empName;
        this.totalSalary = totalSalary+salary;

    }
    void show(){
        //totalSalary = totalSalary+salary;
        System.out.println("Employee number : "+empNo+"  Name:  "+empName+"  Salary : "+salary+"  Total Salary : "+totalSalary);
    }

   
}

public class TotSalary_38 {
    public static void main(String args[]) {
        //Employee emp = new Employee();
        System.out.println("Enter number of employee : ");
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i = 1; i<= n;i++){
            System.out.print("Enter salary of "+i+" & "+" Emplyee Name : ");
            int sal = sc.nextInt();
            String name = sc.next();
            Employee emp = new Employee(i, name, sal);
            emp.show();

        }

    }
}

--------------------------------------------------------------------------------------------------------------

39.	Create class Product with three data members (pid, price, quantity) and parameterized constructor that takes values for all three data members.  
Create a main method in different class (say ProductDemo) and perform following task:
    a. Accept information for five Product objects from user and store objects in an array
    b. Find pid of product with highest price. 
    c. Create a static method (with array of product’s object as argument) in Product class to calculate and return total amount spent on all products. ( amount spent on single product = price of product * quantity of product )

> /*
39.	Create class Product with three data members (pid, price, quantity) and parameterized constructor that takes values for all three data members.  
Create a main method in different class (say ProductDemo) and perform following task:
    a. Accept information for five Product objects from user and store objects in an array
    b. Find pid of product with highest price. 
    c. Create a static method (with array of product’s object as argument) in Product class to calculate and return total amount spent on all products. ( amount spent on single product = price of product * quantity of product )
*/

import java.util.Scanner;
import java.lang.*;

class Product{
    public int pid;
    public float price;
    public int quantity;

    Product(){

    }

    Product(int pid, float price, int quantity){
        this.pid = pid;
        this.price = price;
        this.quantity = quantity;
    }   
    static void calculate(Product [] arr){
        double res=0;
        for(Product a : arr ){
            res = res+(double)(a.price*a.quantity);
        }
        System.out.println("Total Amount spent : " +res);
       // return res;
    }
    void show(){
        System.out.println(pid+"  "+price+"  "+quantity);
    }


}

public class ProductDemo_39 {
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        Product pr[] = new Product[5];
        for(int i=0; i<pr.length; i++){
            System.out.print("Enter ID , Price & Quantity : ");
            int id = sc.nextInt();
            float price = sc.nextFloat();
            int quantity = sc.nextInt();
            Product p = new Product(id, price, quantity);
           // p.set(id,price,quantity);
            pr[i] = p;
        }
       
        float max=pr[0].price;
        Product p = new Product();
        for(Product a : pr){	
            a.show();
            if(a.price > max){
                max = a.price;
                p = a;
            }
        }

        System.out.println("Max Product element : "+p.pid+"  "+p.price+"  "+p.quantity );
        Product.calculate(pr);
        
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------
40.	Create a class Student having data members name, roll no., age and score. Write a program to accept 10 records of student and store them in an array. And then arrange the student records based on the score group [0-50], [50-65], [65-80], [80-100].

import java.util.Scanner;
class Student{
    public String name;
    public int rollno;
    public int age;
    public int score;

    Student(){}
    void set(String name, int rollno, int age, int score){
        this.name = name;
        this.rollno = rollno;
        this.age = age;
        this.score = score;
    }
}
public class Student_40 {
    public static void main(String args[]){
    Scanner sc = new Scanner(System.in);
    Student arr[] = new Student[10];
    for(int i=0;i<arr.length; i++){
        System.out.println("Enter name , rollno, age & score : ");
        String name = sc.next();
        int rollno = sc.nextInt();
        int age = sc.nextInt();
        int score = sc.nextInt();
        Student s = new Student();
        s.set(name, rollno,age, score);
        arr[i] = s;
    }
    for(Student a : arr){
      System.out.println("Name : "+ a.name+", Roll NO : "+a.rollno+", Age : "+a.age+", Score : "+a.score);
    }

    System.out.println("Score Group [0-50] : ");
	    for(int i =0 ; i<arr.length; i++){
	        if(arr[i].score < 50.00 )
	            System.out.println("Name : "+arr[i].name+", Roll : "+arr[i].rollno+", Age : "+arr[i].age+", Score : "+arr[i].score);
	    }
    System.out.println("Score Group [0-50] : ");
   // System.out.println("Score Group [0-50] : ");
    for(int i =0 ; i<arr.length; i++){
        if(arr[i].score < 50.00 )
            System.out.println("Name : "+arr[i].name+", Roll : "+arr[i].rollno+", Age : "+arr[i].age+", Score : "+arr[i].score);
    }
    System.out.println("Score Group [50-65] : ");
    for(int i =0 ; i<arr.length; i++){
        if(arr[i].score >= 50.00 && arr[i].score < 65.00 )
            System.out.println("Name : "+arr[i].name+", Roll : "+arr[i].rollno+", Age : "+arr[i].age+", Score : "+arr[i].score);
    }
    System.out.println("Score Group [65-80] : ");
    for(int i =0 ; i<arr.length; i++){
        if(arr[i].score >= 65.00 && arr[i].score < 80.00 )
            System.out.println("Name : "+arr[i].name+", Roll : "+arr[i].rollno+", Age : "+arr[i].age+", Score : "+arr[i].score);
    }
    System.out.println("Score Group [80-100] : ");
    for(int i =0 ; i<arr.length; i++){
        if(arr[i].score >= 80.00 && arr[i].score <= 100.00 )
            System.out.println("Name : "+arr[i].name+", Roll : "+arr[i].rollno+", Age : "+arr[i].age+", Score : "+arr[i].score);
    }
   

}
}
-----------------------------------------------------------------------------------------------
41.	Write a program to demonstrate this() construct functionality.
>   //41.	Write a program to demonstrate this() construct functionality.
class Demo{
    int id;
    String name;

    Demo(){
        this(1,"deepika");
        System.out.println("Default constructor");
    }
    Demo(int id, String name){
        this.id = id;
        this.name = name;
        System.out.println("Param Constructor");
    }
}

public class thisCon {
    public static void main(String args[]){
    Demo d = new Demo();
}
}
-----------------------------------------------------------------------------------------------------
42.	Create a class Tile to store the edge length of a square tile, and create another class Floor to store length and width of a rectangular floor. Add method totalTiles(Tile t) in Floor class with Tile as argument to calculate the whole number of tiles needed to cover the floor completely.
>   import java.util.Scanner;
class Tile{
    int edge;
    int area;

    Tile(){}

    Tile(int edge){
        this.edge = edge;
        this.area = edge*edge; 
    }
    
}

class Floor{
    int length;
    int width;
    int area;

    Floor(){}

    Floor(int length, int width){
        this.length = length;
        this.width = width;
        this.area = length*width;
    }
    int totalTiles(Tile t){
        int total = this.area/t.area;
        return total;
    }
     
}

public class tile_42 {
    public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		
		 
	    Tile t = new Tile(10);
	    Floor f = new Floor(100, 500);
	    System.out.println("Total no of tiles required : "+f.totalTiles(t));
	}
}
---------------------------------------------------------------------------------

43.	Create a class OneBHK with instance variables roomArea, hallArea and price. Then create default constructor that initializes instance variables with some values and a parameterized constructor that takes values for all instance variables and stores them in instance variables. Now create a method named show()  to print OneBHK’s instance variable values.
Create another class TwoBHK which has (inherites) all the properties and behaviors of OneBHK and a new instance variable room2Area. Then create default constructor to initialize all 4 instance variables and a parameterized constructor to take the values for initialization of all instance variables. Override show() method to print all data member information.
Write main method in another class (Say Demo) and store three TwoBHK flat’s information and print information using show method. Also print total amount of all flats. 

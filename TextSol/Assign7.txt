50.	Explain the importance of toString() and equals() method of the Object class and override them on class Employee(empId,name,salary).  a. Create class for main method(say XYZ),and accept five employees information and store in an array. Also ensure if entered empId already exist or not (use equals method).  b. Display all employee info using toString method.
//50.	Explain the importance of toString() and equals() method of the Object class 
//  and override them on class Employee(empId,name,salary).  
// a. Create class for main method(say XYZ),and accept five employees information and store in an array. 
//  Also ensure if entered empId already exist or not (use equals method).  
//  b. Display all employee info using toString method.

import java.util.Scanner;
class Employee{
    int empId;
    String name;
    int salary;

    Employee(int empId, String name, int salary){
        this.empId = empId;
        this.name = name;
        this.salary = salary;
    }

    public String toString(){
        return empId+" "+name+" "+salary;
    }
}
class ToString{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        Employee emp[] = new Employee[2];
        for(int i=0; i<2; i++){
            System.out.println("Enter value for : "+i);
            int k = sc.nextInt();
            String s = sc.next();
            int sa = sc.nextInt();
            Employee e = new Employee(k,s,sa);
            emp[i] = e;
        }

        for(Employee e : emp )
        System.out.println(e.toString());

    }
}

-------------------------------------------------------------------------------------------------------
51.	Create a program that helps banks to maintain records. It should have following facilities. o Anybody can create current or saving account with following initial information: account number, name, balance, and branch. o display account detail for a particular accounts. o display total money deposited in bank. o allow deposit and  withdrawal in an account  . o for saving account opening balance and minimum balance must be 5000. o for current account opening balance and minimum balance must be 1000. o can not withdraw the amount from the account that makes balance less than the minimum balance. 
package com.assignments.day2;

import java.util.Scanner;

class Bank{
	static int acc = 10000;
	String accno;
	String name;
	double balance;
	String branch;
	static double totalMoney;
	
	Bank(){
	
	}
	
	Bank(char type, String name, double balance, String branch){
		acc++;
		this.accno = type + "" + acc;
		this.name = name;
		this.balance = balance;
		this.branch = branch;
		totalMoney += balance;
	}
	
	void withdraw(double amt) {
		double minBal = 0;
		if(this.accno.charAt(0) == 'C') {
			minBal = 1000;
		}
		else if(this.accno.charAt(0) == 'S') {
			minBal = 5000;
		}
		double temp = this.balance - amt;
		if(temp > minBal) {
			this.balance = temp;
			totalMoney-=temp;
			System.out.println("Updated Details : ");
			System.out.println(this.toString());
		}
		else
			System.out.println("Insufficient Funds!");
	}
	
	void deposit(double amt) {
		this.balance += amt;
		totalMoney+=amt;
		System.out.println("Updated Details : ");
		System.out.println(this.toString());
	}

	@Override
	public String toString() {
		return "Bank [accno=" + accno + ", name=" + name + ", balance=" + balance + ", branch=" + branch + "]";
	}
	
}

public class Question51 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		
		Bank b[] = new Bank[1];
		
		for(int i=0; i<b.length; i++) {
			System.out.println("Enter the Account Type (C/S) : ");
			char acctype = sc.next().charAt(0);
			acctype = Character.toUpperCase(acctype);
			System.out.println("Enter your name : ");
			String name = sc.next();
			System.out.println("Enter Balance : ");
			double bal = sc.nextDouble();
			if((acctype == 'C' || acctype == 'c') && bal <1000) {
				System.out.println("Minimum Balance should be 1000 for Current Account!");
				i--;
				continue;
			}
			if((acctype == 'S' || acctype == 's') && bal <5000) {
				System.out.println("Minimum Balance should be 5000 for Savings Account!");
				i--;
				continue;
			}
			System.out.println("Enter the branch : ");
			String branch = sc.next();
			
			Bank temp = new Bank(acctype, name, bal, branch);
			b[i] = temp;
			System.out.println("Account created with Account Number : "+temp.accno);
		}
		
		while(true) {
			int flag = 0;
			int i=0;
			System.out.println("Enter your Account Number : ");
			String query = sc.next();
			if(query.toLowerCase().equals("exit")) {
				System.exit(0);
			}
				
			for(i=0; i < b.length; i++) {
				if(b[i].accno.equals(query)) {
					flag = 1;
					break;
				}
			}
			if(flag == 0) {
				System.out.println("Invalid Account Number. Please try again!");
				continue;
			}
			System.out.println("1. Display Account Details \n2. Withdraw Cash \n3. Deposit Cash");
			int choice = sc.nextInt();
			switch(choice) {
			case 1:
				System.out.println(b[i]);
				break;
			
			case 2:
				System.out.println("Enter the Amount you want to Withdraw : ");
				double amt = sc.nextDouble();
				b[i].withdraw(amt);
				break;
				
			case 3:
				System.out.println("Enter the Amount you want to Deposit : ");
				double damt = sc.nextDouble();
				b[i].deposit(damt);
				break;
				
			case 4:
				System.exit(0);
				break;
				
			default :
				System.out.println("Invalid Choice! Please try again.");
			}	
		}
		
	}

}
